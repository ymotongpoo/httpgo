package httpgo

import (
	"bytes"
	"encoding/json"
	_ "errors"
	"io"
	"net/http"

	_ "prettyprint"
)

const (
	Form       = "application/x-www-form-urlencoded; charset=utf-8"
	Json       = "application/json; charset=utf-8"
	DefaultUA  = "HTTPgo/" + Version
	JSONPrefix = ""
	JSONIndent = "  "
)

func CreateHTTPRequest(method, urlStr string, pa *ParsedArgs, formFlag bool) (*http.Request, error) {
	var req *http.Request
	var err error
	switch method {
	case "GET":
		req, err = http.NewRequest(method, urlStr+"?"+pa.URLParam.Encode(), nil)
		if err != nil {
			return nil, err
		}
	case "POST", "PUT", "DELETE", "HEAD":
		if formFlag {
			req, err = http.NewRequest(method, urlStr, nil)
			req.Form = pa.URLParam
		} else {
			body, err := makeRequestBody(pa)
			if err != nil {
				return nil, err
			}
			req, err = http.NewRequest(method, urlStr, body)
		}

		if err != nil {
			return nil, err
		}

	}
	req.Header = *pa.Header
	addHTTPgoHeaders(req, formFlag)
	return req, nil
}

// addHTTPgoHeader adds HTTPgo default HTTP header into http.Request generated by CreateHTTPRequest().
func addHTTPgoHeaders(req *http.Request, formFlag bool) {
	if req.Header.Get("User-Agent") == "" {
		req.Header.Set("User-Agent", DefaultUA)
	}

	contentType := Json
	if formFlag {
		contentType = Form
	}
	if req.Header.Get("Content-Type") == "" {
		req.Header.Set("Content-Type", contentType)
	}
}

// makeRequestBody converts data for HTTP reqeust in ParsedArgs instance.
func makeRequestBody(pa *ParsedArgs) (io.Reader, error) {
	// TODO(ymotongpoo): Implement conversion from map to JSON.
	buf, err := json.MarshalIndent(pa.Data, JSONPrefix, JSONIndent)
	if err != nil {
		return nil, err
	}
	return bytes.NewReader(buf), nil
}
